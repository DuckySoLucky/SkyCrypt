<%
/*
..######...#######..##....##..######..########....###....##....##.########..######.
.##....##.##.....##.###...##.##....##....##......##.##...###...##....##....##....##
.##.......##.....##.####..##.##..........##.....##...##..####..##....##....##......
.##.......##.....##.##.##.##..######.....##....##.....##.##.##.##....##.....######.
.##.......##.....##.##..####.......##....##....#########.##..####....##..........##
.##....##.##.....##.##...###.##....##....##....##.....##.##...###....##....##....##
..######...#######..##....##..######.....##....##.....##.##....##....##.....######.
*/
const rarityOrder = ["very_special", "special", "supreme", "divine", "mythic", "legendary", "epic", "rare", "uncommon", "common"];
const slayerOrder = ["zombie", "spider", "wolf", "enderman", "blaze"];

const skillItems = {
  alchemy: "icon-379_0",
  archer: 'icon-261_0',
  berserk: 'icon-267_0',
  carpentry: "icon-58_0",
  catacombs: 'head-964e1c3e315c8d8fffc37985b6681c5bd16a6f97ffd07199e8a05efbef103793',
  combat: "icon-272_0",
  enchanting: "icon-116_0",
  farming: "icon-294_0",
  fishing: "icon-346_0",
  foraging: "icon-6_3",
  healer: 'icon-373_0',
  mage: 'icon-369_0',
  mining: "icon-274_0",
  runecrafting: "icon-378_0",
  social: "icon-388_0",
  taming: "icon-383_0",
  tank: 'icon-299_0',
};

const availableSections = {
  "armor": {
    "enabled": true,
    "armor": true,
    "equipment": true,
    "wardrobe": true,
  },
  "weapons": {
    "enabled": true,
    "weapons": (items.weapons !== undefined && !items.no_inventory),
  },
  "accessories": {
    "enabled": true,
    "accessories": (items.accessories !== undefined && !items.no_inventory),
  },
  "pets": {
    "enabled": true,
    "pets": (calculated.pets.length > 0),
  },
  "inventory": {
    "enabled": true,
    "inventory": (items.inventory && !items.no_inventory),
  },
  "islands": {
    "enabled": true,
    "crimson_isle": {
      "enabled": true,
      "crimson_isle": (calculated.visited_zones.includes("crimson_isle")),
      "factions": (Object.keys(calculated.crimson_isle.factions).length > 0),
      "kuudra": (Object.keys(calculated.crimson_isle.kuudra_completed_tiers).length > 0),
      "dojo": (Object.keys(calculated.crimson_isle.dojo).length > 0),
    }
  },
  "skills": {
    enabled: true,
    "mining": {
      "enabled": true,
      "mining": (calculated.mining !== undefined), // NOTE: check if player visited dwarven mines & crstal hollows
      "mining_tools": (items.mining_tools !== undefined),
      "mining_core": (calculated.mining.core !== undefined),
      "forge": (calculated.mining.forge.processes !== undefined),
    },
    "farming": {
      "enabled": true,
      "farming": (calculated.farming.talked === true),
      "attended_contests": (calculated.farming.contests.attended_contests > 0),
      "farming_tools": (items.farming_tools !== undefined),
    },
    "fishing": {
      "enabled": true,
      "fishing": (calculated.fishing !== undefined),
      "fishing_tools": (items.fishing_tools !== undefined),
    },
    "enchanting": {
      "enabled": true,
      "enchanting": (calculated.enchanting.experimented !== undefined),
    },
  },
  "dungeons": {
    "enabled": true,
    "dungeons": (Object.keys(calculated.dungeons).length > 0 || calculated.dungeons.catacombs?.visited === true || Object.keys(calculated.dungeons.catacombs.floors).length > 0),
  },
  "slayer": {
    "enabled": true
  },
  "minions": {
    "enabled": true,
  },
  "bestiary": {
    "enabled": true,
    "bestiary": (calculated.bestiary?.categories !== undefined),
  },
  "collections": {
    "enabled": true,
    "collections": (Object.keys(calculated.collections).length > 0),
  },
  "miscellaneous": {
    "enabled": true,
    "miscellaneous": (Object.keys(calculated.misc).length > 0),
  },
}

const skillEmojis = {
  alchemy: "⚗️",
  carpentry: "🪑",
  combat: "⚔️",
  enchanting: "🔮",
  farming: "🌾",
  fishing: "🎣",
  foraging: "🌳",
  mining: "⛏️",
  runecrafting: "✨",
  social: "💬",
  taming: "🦴",
  dungeons: "💀",
  archer: "🏹",
  berserk: "🗡️",
  healer: "🚑",
  mage: "🧙🏽",
  tank: "🛡️",
};

const slayerEmojis = {
  zombie: "🧟",
  spider: "🕸️",
  wolf: "🐺",
  enderman: "🔮",
  blaze: "🔥",
};

const KUUDRA = {
  head: "1f0239fb498e5907ede12ab32629ee95f0064574a9ffdff9fc3a1c8e2ec17587",
}

/*
.########.##.....##.##....##..######..########.####..#######..##....##..######.
.##.......##.....##.###...##.##....##....##.....##..##.....##.###...##.##....##
.##.......##.....##.####..##.##..........##.....##..##.....##.####..##.##......
.######...##.....##.##.##.##.##..........##.....##..##.....##.##.##.##..######.
.##.......##.....##.##..####.##..........##.....##..##.....##.##..####.......##
.##.......##.....##.##...###.##....##....##.....##..##.....##.##...###.##....##
.##........#######..##....##..######.....##....####..#######..##....##..######.
*/

function romanize(num) {
	if (!+num)
		return false;
	var	digits = String(+num).split(""),
		key = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM",
		     "","X","XX","XXX","XL","L","LX","LXX","LXXX","XC",
		     "","I","II","III","IV","V","VI","VII","VIII","IX"],
		roman = "",
		i = 3;
	while (i--)
		roman = (key[+digits.pop() + (i * 10)] || "") + roman;
	return Array(+digits.join("") + 1).join("M") + roman;
};

function isEnchanted(item) {
  // heads
  if ([397].includes(item.id)) {
    return false;
  }

  // enchanted book, bottle o' enchanting, nether star
  if ([403, 384, 399].includes(item.id)) {
    return true;
  }

  // potions potions with actual effects (not water bottles)
  if (item.id === 373 && item.Damage !== 0) {
    return true;
  }

  if ("tag" in item && Array.isArray(item.tag.ench)) {
    return true;
  }

  if (item.glowing) {
    return true;
  }

  return false;
}

function itemIcon(item, classes) { %>
  <div <% if (item.texture_path) { %> style='background-image: url("<%= item.texture_path %>")' <% } %> class="
    <%= classes.join(" ") %>
    item-icon
    <% if (isEnchanted(item)) { %>is-enchanted <% } %>
    <% if (item.texture_path) { %>custom-icon<% } %>
    <% if (item.Damage != 0) { %>icon-<%= item.id %>_0<% } %>
    icon-<%= item.id %>_<%= item.Damage %>">
  </div>
<% }

function jerriefy(rank) {
  if (extra.isFoolsDay) {
    rank = rank.replace("VIP", "JER");
    rank = rank.replace("MVP", "JRY");
    rank = rank.replace("HELPER", "JERRY");
    rank = rank.replace("MOD", "JERRY");
    rank = rank.replace("PIG", "JERRY");
    rank = rank.replace("ADMIN", "SR JERRY");
    rank = rank.replace("YOUTUBE", "YERRY");
  }
  return rank;
}

function getRarityUpgradeClass(item) {
  let upgrades = 0

  upgrades += item.extra?.recombobulated ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TIER_BOOST' && !item.ignoresTierBoost ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_VAMPIRE_FANG' ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TOY_JERRY' ? 1 : 0

  return upgrades > 0 ? `piece-rarity-upgrade-${upgrades}` : ''
}

function getMetaTitle() {
	let metaTitle = calculated.display_name

	if (calculated.display_emoji) {
		metaTitle += calculated.display_emoji
	}

  switch (calculated.profile.game_mode) {
    case 'ironman':
      metaTitle += ` (${calculated.profile.cute_name}♻️)`
      break;

    case 'bingo':
      metaTitle += ` (${calculated.profile.cute_name}🎲)`
      break;

    case 'island':
      metaTitle += ` (${calculated.profile.cute_name}🌴)`
      break;

    default:
		  metaTitle += ` (${calculated.profile.cute_name})`
      break;
  }

	return metaTitle
}

function getMetaDescription() {
	const description = []
	const highestRaritySword = getHighestRaritySword()

	// Base
	description.push(
		`${calculated.display_name} has been playing SkyBlock for ${moment(
			calculated.first_join.unix
		).fromNow(true)}`
	)

	// Armor set
	if (items.armor_set) {
		description.push(
			highestRaritySword
				? `, is wearing ${items.armor_set}`
				: ` and is wearing ${items.armor_set}`
		)
	}

	// Sword
	if (highestRaritySword) {
		description.push(
			items.armor_set
				? ` and fighting with ${helper.aOrAn(
						highestRaritySword
				  )} ${highestRaritySword}`
				: ` and is fighting with ${helper.aOrAn(
						highestRaritySword
				  )} ${highestRaritySword}`
		)
	}

	description.push('.')

	return description.join('')
}

function getDescription() {
	const description = []

	// Fairy souls
	description.push(
		`🧚 ${calculated.fairy_souls.collected}/${calculated.fairy_souls.total} Fairy Souls`,
		'\n'
	)

	// Armor
	if (items.armor_set) {
		description.push(`🛡️ ${items.armor_set}`, '\n')
	}

	// Sword
	const highestRaritySword = getHighestRaritySword()
	if (highestRaritySword) {
		description.push(`🗡️ ${highestRaritySword}`, '\n')
	}

	// Skills
	if ('levels' in calculated) {
		let { levels } = calculated

		let skillsSorted = Object.keys(levels).sort(
			(a, b) =>
				levels[b].level +
				levels[b].progress -
				(levels[a].level + levels[a].progress)
		)

		const skillAmount =
			calculated.pets.filter((a) => a.active).length >= 1 ? 1 : 2

		for (let i = 0; i < skillAmount; i++) {
			const skill = skillsSorted[i]
			const skillName = skill.charAt(0).toUpperCase() + skill.slice(1)

			if (levels[skill].level == 0) {
				break
			}

			description.push(
				`${skillEmojis[skill]} ${skillName} ${levels[skill].level}`,
				'\n'
			)
		}
	}

	// Pet
	if (calculated.pets.filter((a) => a.active).length >= 1) {
		const activePet = calculated.pets.find((a) => a.active)

		description.push(
			`${activePet.emoji} ${helper.titleCase(activePet.rarity)} ${
				activePet.display_name
			} (Lvl ${activePet.level.level})`,
			'\n'
		)
	}

	// Line break
	description.push('\n')

	// Slayers
	if (calculated.slayer_coins_spent.total > 0) {
		description.push('🤺 Slayer: ')

		for (const slayer of slayerOrder) {
			if (!calculated.slayers[slayer]) {
				continue
			}

			const slayerInfo = calculated.slayers[slayer]
			description.push(
				`${slayerEmojis[slayer]} ${slayerInfo.level.currentLevel}  `
			)
		}
		description.push('\n')
	}

  // Dungeons
  if ('dungeons' in calculated && calculated.dungeons.catacombs?.level?.level > 0) {
    const line = []

    if (calculated.dungeons.catacombs?.level) {
      line.push(`${skillEmojis["dungeons"]} Catacombs: ${calculated.dungeons.catacombs.level.level}`)
    }

    if (calculated.dungeons.classes) {
      const classesLine = []
      for (const [dclass, data] of Object.entries(calculated.dungeons.classes)) {
        classesLine.push(`${skillEmojis[dclass]} ${data.experience?.level ?? 0}`)
      }
      line.push(`(${classesLine.join('  ')})`)
    }

    description.push(line.join(' '), '\n', '\n')
  }

	// Avg. skill
	if (calculated.average_level) {
		description.push(
			`📚 Avg Skill Level: ${
				Math.floor(calculated.average_level * 10) / 10
			} `
		)
		description.push('\n')
	}

	// Weights
	if (calculated.weight) {
		description.push(
			`💪 Senither Weight: ${Math.floor(
				calculated.weight.senither.overall
			).toLocaleString()} `,
			`💪 Lily Weight: ${Math.floor(
				calculated.weight.lily.total
			).toLocaleString()}`
		)
		description.push('\n')
	}

	// Bank & purse
	if (calculated.bank) {
		description.push(
			`🏦 Bank: ${helper.formatNumber(calculated.bank, true)} `
		)
	}
	description.push(`💰 Purse: ${helper.formatNumber(calculated.purse, true)}`)

	// Done!
	return description.join('')
}

function getHighestRaritySword() {
	let highestRaritySword

	if (!items.highest_rarity_sword) {
		return highestRaritySword
	}

	highestRaritySword = items.highest_rarity_sword.display_name

	if (items.highest_rarity_sword?.tag?.ExtraAttributes?.id == 'MIDAS_SWORD') {
		highestRaritySword = highestRaritySword.replace(
			'Midas',
			`${helper.formatNumber(
				items.highest_rarity_sword.tag.ExtraAttributes.winning_bid,
				true,
				1
			)} Midas`
		)
	}

	return highestRaritySword
}

/*
..######...########.##....##.########.########.....###....########.########.########.
.##....##..##.......###...##.##.......##.....##...##.##......##....##.......##.....##
.##........##.......####..##.##.......##.....##..##...##.....##....##.......##.....##
.##...####.######...##.##.##.######...########..##.....##....##....######...##.....##
.##....##..##.......##..####.##.......##...##...#########....##....##.......##.....##
.##....##..##.......##...###.##.......##....##..##.....##....##....##.......##.....##
..######...########.##....##.########.##.....##.##.....##....##....########.########.
*/
const metaTitle = getMetaTitle()
const description = getDescription()
const metaDescription = getMetaDescription()

%>
<!DOCTYPE html>
<html lang="en">

<head>
  <title><%= calculated.display_name %><% if (calculated.display_emoji) { %> <%= calculated.display_emoji %><% } %> | SkyCrypt</title>
  <meta name="description" content="<%= metaDescription %>">
  <link rel="icon" href="https://crafatar.com/avatars/<%= extra.isFoolsDay ? 'bd482739767c45dca1f8c33c40530952' : calculated.uuid %>?size=32&overlay" sizes="32x32" type="image/png">
  <meta property="og:type" content="profile">
  <meta property="og:title" content="<%= metaTitle %>">
  <meta property="og:image" content="https://crafatar.com/avatars/<%= calculated.uuid %>?size=512&overlay">
  <meta property="og:description" content="<%= description %>">
  <meta property="og:profile:username" content="<%= calculated.display_name %>">
  <meta name="twitter:card" content="summary">
  <%- include('../includes/resources') %>
</head>

<body class="page-stats">
  <svg xmlns="http://www.w3.org/2000/svg" height="0" width="0" style="position: fixed;">
    <filter id="enchanted-glint">
      <feImage href="/resources/img/enchanted-glint.png" />
      <feComposite in2="SourceGraphic" operator="in" />
      <feBlend in="SourceGraphic" mode="screen" />
    </filter>
  </svg>
  <%- include('../includes/header') %>
  <div id="dimmer">
    <video preload="none" id="enable_api" loop>
      <source type="video/webm" src="/resources/video/enable-api.webm" />
      <source type="video/mp4" src="/resources/video/enable-api.mp4" />
    </video>
  </div>
  <div id="stats_content">
    <div class="item-name">
      <div class="stats-piece-icon__wrapper">
        <div class="stats-piece-icon"></div>
      </div>
      <p class="item-name__name"></p>
      <button class="close-lore" aria-label="Close"></button>
    </div>
    <div class="item-lore"></div>
    <inventory-view class="backpack-contents" preview></inventory-view>
  </div>
  <div id="skin_display">
    <div id="player_model"></div>
  </div>
  <main id="wrapper" data-sticky-container>
    <% if (extra.cacheOnly) { %>
      <figure class="banner error">
        <figcaption>Cache Only Mode!</figcaption>
        <p>
          SkyCrypt is <strong>only</strong> showing the last known state of user's profiles which may be outdated due to API maintenance.<br>
          <%# <i>If a profile wasn't viewed/cached before, it can't be viewed.</i><br> %>
          <br>
          For more info about Hypixel outages visit the official <a href="https://status.hypixel.net/" target="_blank" rel="noreferrer"> Hypixel Status</a>.
        </p>
      </figure>
    <% } %>

    <div id="player_profile"><span class="text-stats-for">Stats for</span>
      <span tabindex="0" id="stats_for_player">
        <%- jerriefy(calculated.rank_prefix) %>
        <%= calculated.display_name %>
        <% if (calculated.display_emoji_img) { %>
        <img class="emoji" draggable="false" src="<%= calculated.display_emoji_img %>">
        <% }else if (calculated.display_emoji) { %>
        <%- extra.twemoji.parse(calculated.display_emoji) %>
        <% } %>
        <ul id="other_players">
          <% calculated.members.forEach(member => { %>
          <li>
            <a class="goto" href="/stats/<%= member.uuid %>/<%= calculated.profile.profile_id %><%= Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '' %>">
              <%= member.display_name %>
              <% if (member.emojiImg) { %>
              <img class="emoji" draggable="false" src="<%= member.emojiImg %>">
              <% }else if (member.emoji) { %>
              <%- extra.twemoji.parse(member.emoji) %>
              <% } %>
            </a>
          </li>
          <% }); %>
        </ul>
      </span>
      <span class="text-on"> on </span>
      <span tabindex="0" id="stats_for_profile">
        <%= calculated.profile.cute_name %>
        <% if (calculated.profile.game_mode == 'ironman') { %>
          <img src="/resources/img/icons/ironman.png" class="emoji" alt="ironman">
        <% } %>
        <% if (calculated.profile.game_mode == 'bingo') { %>
          <%- extra.twemoji.parse("🎲") %>
        <% } %>
        <% if (calculated.profile.game_mode == 'island') { %>
          <%- extra.twemoji.parse("🌴") %>
        <% } %>
        <ul id="other_profiles">
          <% for(let profile_id in calculated.profiles) { %>
            <% let _profile = calculated.profiles[profile_id]; %>
            <li>
              <a class="goto" href="/stats/<%= calculated.uuid %>/<%= _profile.profile_id %><%= Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '' %>">
                <%= _profile.cute_name %>
                <% if (_profile.game_mode == 'ironman') { %>
                  <img src="/resources/img/icons/ironman.png" class="emoji">
                <% } %>
                <% if (_profile.game_mode == 'bingo') { %>
                  <%- extra.twemoji.parse("🎲") %>
                <% } %>
                <% if (_profile.game_mode == 'island') { %>
                  <%- extra.twemoji.parse("🌴") %>
                <% } %>
              </a>
            </li>
          <% } %>
        </ul>
      </span>
      <div id="additional_player_stats">
        <button class="additional-player-stat svg-icon favorite" data-username="<%= calculated.uuid %>" role="checkbox">
          <svg viewBox="0 0 24 24">
            <title>star</title>
            <path class="solid" fill="white" d="M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z" />
            <path class="outline" fill="white" d="M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z" />
          </svg>
        </button>
        <% if (calculated.guild) { %><button class="additional-player-stat interactive-tooltip" data-tippy-content="
        <% if (calculated.guild.rank) { %><span class='stat-name'>Rank: </span><span class='stat-value'><%= calculated.guild.rank %></span><br><br><% } %>
        <span class='stat-name'>Guild Master: </span><% if (calculated.guild.gm) {%> <a href='/stats/<%= calculated.guild.gm %>' class='no-underline stat-value'><%= calculated.guild.gmUser.display_name %><%} else { %>None<% } %></a><br>
        <% if (calculated.guild.tag) { %><span class='stat-name'>Tag: </span><span class='stat-value'><%- helper.renderLore('§f'+calculated.guild.tag) %></span><br><% } %>
        <% if (calculated.guild.members) { %><span class='stat-name'>Members: </span><span class='stat-value'><%= calculated.guild.members %></span><br><% } %>
        <% if (calculated.guild.level) { %><span class='stat-name'>Level: </span><span class='stat-value'><%= calculated.guild.level %></span><br><% } %>
        ">Guild: <%= calculated.guild.name %></button><% } %>
        <a href="https://plancke.io/hypixel/player/stats/<%= calculated.display_name %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link">Plancke</a>
        <div id="additional_socials">
          <button data-copy-text="<%= calculated.uuid %>" class="copy-text additional-player-stat">Copy UUID</button>
          <% if ('DISCORD' in calculated.social) { %><button data-copy-text="<%= calculated.social.DISCORD %>" class="additional-player-stat copy-text external-discord external-icon"><%= calculated.social.DISCORD %></button><% } %>
          <% if ('TWITTER' in calculated.social) { %><a data-tippy-content="Twitter" href="<%= calculated.social.TWITTER %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-twitter"></a><% } %>
          <% if ('YOUTUBE' in calculated.social) { %><a data-tippy-content="YouTube" href="<%= calculated.social.YOUTUBE %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-youtube"></a><% } %>
          <% if ('INSTAGRAM' in calculated.social) { %><a data-tippy-content="Instagram" href="<%= calculated.social.INSTAGRAM %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-instagram"></a><% } %>
          <% if ('TWITCH' in calculated.social) { %><a data-tippy-content="Twitch" href="<%= calculated.social.TWITCH %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-twitch"></a><% } %>
          <% if ('HYPIXEL' in calculated.social) { %><a data-tippy-content="Hypixel Forums" href="<%= calculated.social.HYPIXEL %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-hypixel"></a><% } %>
          <button class="additional-player-stat" id="reveal_socials" aria-label="reveal socials"></button>
        </div>
      </div>
    </div>

    <% if (calculated.uuid == "b876ec32e396476ba1158438d83c67d4") { %>
      <div id="techno-support">
        <span class="support-title">Thank you for everything, Technoblade.</span><br>
        <p class="support-text">
          If you can, <a href="https://www.curesarcoma.org/donate/" target="_blank">donate</a> to the Sarcoma Foundation of America and <a href="https://technoblade.com/" target="_blank">buy</a> his merch.
        </p>
      </div>
    <% } %>

    <div id="basic_stats">
      <%
      let sword = items.weapons.slice().sort((a, b) => a.item_index - b.item_index);
      let rod = items.fishing_tools.slice().sort((a, b) => a.item_index - b.item_index);

      if (items.highest_rarity_sword) {
        sword = [items.highest_rarity_sword];
      }

      if (items.highest_rarity_fishing_tool) {
        rod = [items.highest_rarity_fishing_tool];
      }%>

      <div id="skin_display_mobile"></div>

      <div id="base_stats_wrapper">
        <div id="base_stats_container"></div>
        <button id="show_stats">Show Stats</button>
      </div>

      <div id="additional_stats_container">
        <% if (calculated.current_area) { %>
          <div class="additional-stat"><span class="stat-name"><%= calculated.current_area_updated ? 'Current' : 'Last' %> Area: </span><span class="stat-value"><%= calculated.current_area %></span></div>
        <% } %>
        <div class="additional-stat"><span data-tippy-content='Joined on <local-time timestamp="<%= calculated.first_join.unix %>"></local-time>'><span class="stat-name">Joined: </span><span class="stat-value"><%= calculated.first_join.text %></span></span></div>
        <div class="additional-stat"><span class="stat-name">Purse: </span><span class="stat-value"><%= helper.formatNumber(calculated.purse, true) %> Coin<%= Math.floor(calculated.purse) == 1 ? '': 's' %></span></div>
        <% if ('bank' in calculated) { %>
          <div class="additional-stat"><span class="stat-name">Bank Account: </span><span class="stat-value"><%= helper.formatNumber(calculated.bank, true) %> Coin<%= Math.floor(calculated.bank) == 1 ? '': 's' %></span></div>
        <% } %>
        <% if ('levels' in calculated && 'runecrafting' in calculated.levels) { %>
          <div class="additional-stat"><span data-tippy-content="
            <span class='stat-name'>Total Skill XP: </span><span class='stat-value'><%= Math.round(calculated.total_skill_xp).toLocaleString() %></span>
            <div class='tippy-explanation'>Total XP gained in all skills except Social and Runecrafting.</div>
            <span class='stat-name'>Average Level: </span><span class='stat-value'><%= calculated.average_level.toFixed(2) %></span>
            <div class='tippy-explanation'>Average skill level over all skills except Social and Runecrafting<% if ('runecrafting' in calculated.levels) { %>, includes progress to next level<% } %>.</div><% if ('runecrafting' in calculated.levels) { %><span class='stat-name'>Average Level without progress: </span><span class='stat-value'><%= calculated.average_level_no_progress.toFixed(2) %></span>
            <div class='tippy-explanation'>Average skill level without including partial level progress.</div><% } %>
            "><span class="stat-name">Average Skill Level: </span><span class="stat-value"><%= calculated.average_level.toFixed(2) %></span></span>
          </div>
        <% } %>
        <div class="additional-stat">
          <span data-tippy-content="<%= (calculated.fairy_souls.progress*100).toFixed(2) %>% of fairy souls found."><span class="stat-name">Fairy Souls: </span><span class="stat-value"><%= calculated.fairy_souls.collected %> / <%= calculated.fairy_souls.total %></span></span>
        </div>
          <%
          const weightSystems = [
            {
              name: "Senither Weight",
              author: "Senither",
              skill: calculated.weight.senither.skill.total,
              slayer: calculated.weight.senither.slayer.total,
              dungeon: calculated.weight.senither.dungeon.total,
              total: calculated.weight.senither.overall,
            },
            {
              name: "Lily Weight",
              author: "LappySheep",
              skill: calculated.weight.lily.skill.base + calculated.weight.lily.skill.overflow,
              slayer: calculated.weight.lily.slayer,
              dungeon: calculated.weight.lily.catacombs.experience + calculated.weight.lily.catacombs.completion.base + calculated.weight.lily.catacombs.completion.master,
              total: calculated.weight.lily.total,
            },
          ];

        if (calculated.weight) {
          for (weight of weightSystems) { %>
            <div class="additional-stat">
              <span data-tippy-content="
                <span class='stat-name'><%= weight.name %></span><br>
                <span class='stat-info'>Weight calculations by <%= weight.author %></span>
                <br/><br/>
                <span class='stat-name'>Skill: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.skill.toFixed(2)).toLocaleString() %>
                </span><br/>
                <span class='stat-name'>Slayer: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.slayer.toFixed(2)).toLocaleString() %>
                </span><br/>
                <span class='stat-name'>Dungeon: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.dungeon.toFixed(2)).toLocaleString() %>
                </span><br/><br/>
                <span class='stat-name'>Total: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.total.toFixed(2)).toLocaleString() %>
                </span>
              ">
              <span class="stat-name"><%= weight.name %>: </span>
              <span class="stat-value"><%= parseFloat(Math.round(weight.total)).toLocaleString() %></span></span>
            </div>
          <% } %>
        <% } %>
      </div>

      <div id="skill_levels_container">
        <% if ('levels' in calculated) { %>
          <div class="skill-bars" data-api-enabled="<%= 'runecrafting' in calculated.levels %>">
            <skill-component skill="taming" type="skill" icon="<%= skillItems.taming %>"></skill-component>
            <skill-component skill="farming" type="skill" icon="<%= skillItems.farming %>"></skill-component>
            <skill-component skill="mining" type="skill" icon="<%= skillItems.mining %>"></skill-component>
            <skill-component skill="combat" type="skill" icon="<%= skillItems.combat %>"></skill-component>
            <skill-component skill="foraging" type="skill" icon="<%= skillItems.foraging %>"></skill-component>
            <skill-component skill="fishing" type="skill" icon="<%= skillItems.fishing %>"></skill-component>
            <skill-component skill="enchanting" type="skill" icon="<%= skillItems.enchanting %>"></skill-component>
            <skill-component skill="alchemy" type="skill" icon="<%= skillItems.alchemy %>"></skill-component>
            <% if ('runecrafting' in calculated.levels) { %>
              <skill-component skill="carpentry" type="skill" icon="<%= skillItems.carpentry %>"></skill-component>
              <skill-component skill="runecrafting" type="skill" icon="<%= skillItems.runecrafting %>"></skill-component>
              <skill-component skill="social" type="skill" icon="<%= skillItems.social %>"></skill-component>
            <% } else { %>
              <div class="no-access">Skills from achievements across profiles. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">Enable Skills API</a> for more accurate data.</div>
            <% } %>
          </div>
        <% } else { %>
          <div class="no-access"><%= calculated.display_name %> doesn't have skills access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
        <% } %>
      </div>
    </div>

    <div id="nav_bar">
      <div id="nav_bar_line"></div>
      <div id="nav_bar_background"></div>
      <div id="nav_items_container">
        <% if (availableSections.armor.enabled) { %> <a class="nav-item" href="#Armor">Armor</a><% } %>
        <% if (availableSections.inventory.enabled && availableSections.inventory.invetory) { %><a class="nav-item" href="#Weapons">Weapons</a><% } %>
        <% if (availableSections.accessories.enabled && availableSections.accessories.accessories) { %><a class="nav-item" href="#Accessories">Accessories</a><% } %>
        <% if (availableSections.pets.enabled && availableSections.pets.pets) { %><a class="nav-item" href="#Pets">Pets</a><% } %>
        <% if (availableSections.inventory.enabled && availableSections.inventory.inventory) { %><a class="nav-item" href="#Inventory">Inventory</a><% } %>
        <% if (availableSections.skills.enabled) { %> <a class="nav-item" href="#Skills">Skills</a><% } %>
        <% if (availableSections.islands.enabled) { %><a class="nav-item" href="#Islands">Islands</a><% } %>
        <% if (availableSections.dungeons.enabled) { %> <a class="nav-item" href="#Dungeons">Dungeons</a><% } %>
        <% if (availableSections.slayer.enabled) { %> <a class="nav-item" href="#Slayer">Slayer</a><% } %>
        <% if (availableSections.minions.enabled) { %> <a class="nav-item" href="#Minions">Minions</a><% } %>
        <% if (availableSections.bestiary.enabled && availableSections.bestiary.bestiary) { %><a class="nav-item" href="#Bestiary">Bestiary</a><% } %>
        <% if (availableSections.collections.enabled && availableSections.collections.collections) { %><a class="nav-item" href="#Collections">Collections</a><% } %>
        <% if (availableSections.miscellaneous.enabled && availableSections.miscellaneous.miscellaneous) { %><a class="nav-item" href="#Misc"><abbr title="Miscellaneous">Misc</abbr></a><% } %>
      </div>
    </div>
    <div class="stat-containers">
      <%
      const notAvailable = [];

      if (items.no_inventory) {
        notAvailable.push('Weapons', 'Accessories', 'Inventory', 'Storage');
      }

      if (items.no_personal_vault) {
        notAvailable.push('Personal Vault');
      }

      if (Object.keys(calculated.collections).length == 0) {
        notAvailable.push('Collections');
      }
      %>

      <% if (notAvailable.length > 0 || ['ironman', 'bingo', 'island'].includes(calculated.profile.game_mode)) { %>
        <div class="stat-container info-container-wrapper">
          <div class="info-container">
            <div class="info-header">Notice</div>
            <% if (notAvailable.length > 0) { %>
              <%= notAvailable.join(', ') %> not available for <%= calculated.display_name %> due to limited API access.<br><span><a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</span>
            <% } %>

            <% if (calculated.profile.game_mode == 'ironman') { %>
              <% if (notAvailable.length > 0) { %><br><br><% } %>
              This is an <strong>Ironman</strong> profile. The player cannot use the auction house, bazaar, trade, or pick up drops from other players.
            <% } %>

            <% if (calculated.profile.game_mode == 'bingo') { %>
              <% if (notAvailable.length > 0) { %><br><br><% } %>
              This is a <strong>Bingo</strong> profile. The player cannot spend gems, use the auction house, bazaar, trade, or pick up drops from other players.
            <% } %>

            <% if (calculated.profile.game_mode == 'island') { %>
              <% if (notAvailable.length > 0) { %><br><br><% } %>
              This is a <strong>Stranded</strong> profile. The player cannot leave their skyblock island or trade with other players.
            <% } %>
          </div>
        </div>
      <% } %>

      <!-- ARMOR, EQUIPMENT & WARDROBE -->
      <% if (availableSections.armor.enabled) { %>
        <% if (availableSections.armor.armor === true || availableSections.armor.equipment === true || availableSections.armor.wardrobe === true) { %>
          <%- include('./sections/stats/armor.ejs', { availableSections: availableSections, getRarityUpgradeClass: getRarityUpgradeClass, rarityOrder: rarityOrder }); %>
        <% } %>
      <% } %>

      <!-- WEAPONS -->
      <% if (availableSections.weapons.weapons === true && availableSections.weapons.enabled) { %>
        <%- include('./sections/stats/weapons.ejs', { rarityOrder: rarityOrder, getRarityUpgradeClass: getRarityUpgradeClass, renderLore: helper.renderLore }); %>
      <% } %>

      <!-- ACCESSORIEES -->
      <% if (availableSections.accessories.accessories === true && availableSections.accessories.enabled) { %>
        <%- include('./sections/stats/accessories.ejs', { getRarityUpgradeClass: getRarityUpgradeClass, rarityOrder: rarityOrder }); %>
      <% } %>

      <!-- PETS -->
      <% if (availableSections.pets.pets === true && availableSections.pets.enabled) { %>
        <%- include('./sections/stats/pets.ejs', { getRarityUpgradeClass: getRarityUpgradeClass, rarityOrder: rarityOrder }); %>
      <% } %>

      <!-- INVENTORY -->
      <% if (availableSections.inventory.inventory === true && availableSections.inventory.enabled) { %>
        <%- include('./sections/stats/inventory.ejs', { getRarityUpgradeClass: getRarityUpgradeClass, rarityOrder: rarityOrder }); %>
      <% } %>

      <!-- SKILLS (Mining, Farming, Fishing)-->
      <% if (availableSections.skills.enabled === true) { %>
        <%- include('./sections/stats/skills.ejs', { availableSections: availableSections, getRarityUpgradeClass: getRarityUpgradeClass, rarityOrder: rarityOrder }); %>
      <% } %>

      <!-- ISLANDS (Crimson Isle)-->
      <% if (availableSections.islands.enabled === true) { %>
        <%- include('./sections/stats/islands.ejs', { availableSections: availableSections }); %>
      <% } %>
 
      <!-- DUNGEONS -->
      <% if (availableSections.dungeons.enabled === true && availableSections.dungeons.dungeons) { %>
        <%- include('./sections/stats/dungeons.ejs', { availableSections: availableSections, skillItems: skillItems }); %>
      <% } %>

      <!-- SLAYER -->
      <% if (availableSections.slayer.enabled === true) { %>
        <%- include('./sections/stats/slayer.ejs', { slayerOrder: slayerOrder, romanize: romanize }); %>
      <% } %>

      <!-- MINIONS -->
      <% if (availableSections.minions.enabled === true) { %>
        <%- include('./sections/stats/minions.ejs', { skillItems: skillItems, romanize: romanize }); %>
      <% } %>

      <!--  BESTIARY -->
      <% if (availableSections.bestiary.enabled === true) { %>
        <%- include('./sections/stats/bestiary.ejs'); %>
      <% } %>

      <!-- COLLECTION -->
      <% if (availableSections.collections.enabled === true && availableSections.collections.collections) { %>
        <%- include('./sections/stats/collections.ejs', { skillItems: skillItems }); %>
      <% } %>

      <!-- MISCELLANEOUS -->
      <% if (availableSections.miscellaneous.enabled === true && availableSections.miscellaneous.miscellaneous) { %>
        <%- include('./sections/stats/miscellaneous.ejs', { skillItems: skillItems, rarityOrder: rarityOrder }); %>
      <% } %>
    </div>
  </main>

  <%- include('../includes/footer'); %>

  <script>
    <%
    const clientConstants = {
      MAX_FAVORITES: constants.MAX_FAVORITES,
    }
    %>

    const items = JSON.parse(`<%- JSON.stringify(items).replaceAll('\\', '\\\\') %>`);
    const calculated = JSON.parse(`<%- JSON.stringify(calculated).replaceAll('\\', '\\\\') %>`);
    const constants = JSON.parse(`<%- JSON.stringify(clientConstants).replaceAll('\\', '\\\\') %>`);
  </script>
</body>
</html>