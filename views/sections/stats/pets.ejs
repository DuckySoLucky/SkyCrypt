<div class="stat-container stat-pets">
  <a class="stat-anchor" id="Pets"></a>
  <h2 class="stat-header">Pets</h2>
  <div class="stat-content">
    <%
        const uniquePets = 
            _.uniq(
            calculated.pets
                .filter(pet => !constants.PET_DATA[pet.type].bingoExclusive === true || calculated.profile.game_mode === 'bingo')
                .map((pet) => constants.PET_DATA[pet.type].typeGroup ?? pet.type)
            )
            const totalPets = 
            _.uniq(
            Object.entries(
                Object.fromEntries(
                Object.entries(constants.PET_DATA)
                    .filter(pet => !pet[1].bingoExclusive === true || calculated.profile.game_mode === 'bingo')
                )
            ).map(arr => arr[1].typeGroup || arr[0])
            ).length

            let totalPetXp = 0
            for (const pet of calculated.pets) {
            totalPetXp += pet.exp
            }

            let totalSkins = {}
            let badSkins = {}
            for (const [skin, skinData] of Object.entries(constants.PET_SKINS)) {
            if (skinData.release > Date.now()) continue;

            totalSkins[skin] = calculated.pets.find((pet) => `PET_SKIN_${pet.skin}` === skin) != undefined;
            }

            let userUniqueSkins = Object.values(totalSkins).filter(skin => skin).length
            let totalUniqueSkins = Object.keys(totalSkins).length
            let totalCandiesUsed = calculated.pets.reduce((total, pet) => total + pet.candyUsed, 0)
        %>

    <p class="stat-raw-values">
      <% max = uniquePets.length >= totalPets ? 'golden-text': '' %>
      <span class="stat-name <%= max %>">Unique Pets: </span><span class="stat-value <%= max %>"><%= uniquePets.length %> / <%= totalPets %></span><br>

      <% max = userUniqueSkins >= totalUniqueSkins ? 'golden-text': '' %>
      <span class="stat-name <%= max %>">Unique Pet Skins: </span><span class="stat-value <%= max %>"><%= userUniqueSkins %> / <%= totalUniqueSkins %></span><br>
      <%
            const petRewards = constants.PET_REWARDS
            const petScore = calculated.petScore
            max = petScore >= Math.max(...Object.keys(petRewards)) ? 'golden-text' : ''
            %>

      <span data-tippy-content="
            Increase your pet score by collecting unique pets with a high rarity.<br><br>
            <table>
                <% const entries = Object.entries(petRewards) %>
                <% const reduced = Object.keys(petRewards).reduce((prev, curr) => Math.abs(curr - petScore) < Math.abs(prev - petScore) ? curr : prev) %>

                <% for (let i = 1; i < entries.length; i++) { %>
                <% const [score, {magic_find}] = entries[i] %>

                <% if (score === reduced) { %>
                    <tr><td><%= score %> Score: </td><td><span class='color-magic-find grey-text'>+<%= magic_find %> Magic Find</span><span style='color: var(--§5);' class='grey-text'> «</span></td>
                <% } else { %>
                    <tr><td><%= score %> Score: </td><td><span class='color-magic-find grey-text'>+<%= magic_find %> Magic Find</span></td>
                <% } %>
                <% } %>
            </table>
            ">
        <span class="stat-name <%= max %>">Pet Score: </span><span class="stat-value <%= max %>"><%= petScore %></span>
      </span>


      <% if (calculated.pet_score_bonus.magic_find > 0) { %><span class="grey-text color-magic-find"> (+<%= calculated.pet_score_bonus.magic_find %> <abbr title="Magic Find">MF</abbr>)</span><% } %><br>

      <% max = totalCandiesUsed === 0 ? 'golden-text': '' %>
      <span class="stat-name <%= max %>">Total Candies Used: </span><span class="stat-value <%= max %>"><%= totalCandiesUsed %></span><br>

      <span class="stat-name">Total Pet XP: </span><span class="stat-value"><%= helper.formatNumber(totalPetXp, true) %></span>
    </p>
    <%
        const petsToShow = 100
        const petsToShowLimit = 1000
        const activePet = calculated.pets.find(pet => pet.active)
        const otherPets = calculated.pets.filter(pet => !pet.active).slice(0, petsToShowLimit)
        %>
    <% if (activePet) { %>
    <p class="stat-sub-header">Active Pet</p>
    <div class="pieces">
      <div tabindex="0" data-pet-index="0" class="active-pet rich-item piece piece-<%= activePet.rarity %>-bg <%= getRarityUpgradeClass(activePet) %>">
        <% if (rarityOrder.indexOf(activePet.rarity) <= 4) { %>
        <div class="piece-shine"></div>
        <% } %>

        <div style='background-image: url("<%= activePet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
      </div>
      <div class="active-pet-info">
        <div class="pet-name piece-<%= activePet.rarity %>-fg"><%= activePet.rarity %> <%- activePet.display_name %></div>
        <div class="pet-level">Level <%= activePet.level.level %></div>
      </div>
    </div>
    <div data-bonus-stats="pet"></div>
    <% } %>

    <% if (otherPets) { %>
    <p class="stat-sub-header"><%= activePet ? 'Other Pets' : '' %></p>
    <div class="pieces">
      <% for(const [index, pet] of otherPets.entries()) { %>
      <% if ((activePet && index === petsToShow - 1) || (!activePet && index === petsToShow)) { %>
    </div>
    <button class="stat-sub-header extender" aria-controls="showmore-pets" aria-expanded="false">Show More Pets</button>
    <div class="pieces extendable" id="showmore-pets">
      <% } %>
      <div tabindex="0" data-pet-index="<%= activePet ? index + 1 : index %>" class="other-pet rich-item piece piece-<%= pet.rarity %>-bg <%= getRarityUpgradeClass(pet) %>">
        <% if (rarityOrder.indexOf(pet.rarity) <= 4) { %>
        <div class="piece-shine"></div>
        <% } %>

        <div style='background-image: url("<%= pet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
        <div class="other-pet-level"><abbr title="Level">Lvl</abbr> <%= pet.level.level %></div>
      </div>
      <% } %>
    </div>
    <% } %>

    <% if (calculated.missingPets.length > 0) { %>
    <% if (calculated.pets.length == 1) { %>
    <br>
    <% } %>

    <button class="stat-sub-header extender" aria-controls="missing-pets" aria-expanded="false">Missing Pets</button>
    <div class="pieces extendable" id="missing-pets">
      <% for(const [index, pet] of calculated.missingPets.entries()) { %>
      <div tabindex="0" data-missing-pet-index="<%= index %>" class="rich-item piece piece-<%= pet.rarity %>-bg missing-pet">
        <div style='background-image: url("<%= pet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
      </div>
      <% } %>
    </div>
    <% } %>
  </div>
</div>